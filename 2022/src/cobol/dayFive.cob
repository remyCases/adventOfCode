       >>SOURCE FORMAT FREE
*> Copyright (C) 2023 RÃ©my Cases
*> See LICENSE file for extended copyright information.
*> This file is part of adventOfCode project from https://github.com/remyCases/adventOfCode.

IDENTIFICATION DIVISION.
PROGRAM-ID. DAYFIVE.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
       SELECT DataFile ASSIGN TO "2022/data/input_day_five_truncated.txt" 
           ORGANIZATION IS LINE SEQUENTIAL 
           ACCESS IS SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD DataFile.
01 F-Data PIC X(50) VALUE ZEROES.

WORKING-STORAGE SECTION.
01 WS-EOF PIC A.
01 WS-Action.
       05 WS-Quantity PIC 99 VALUES 0.
       05 WS-Src PIC 9 VALUES 0.
       05 WS-Des PIC 9 VALUES 0.
           
01 LCOUNT PIC 99 USAGE DISPLAY VALUE 0.
01 NBYTES-NODE PIC S9(9) BINARY.
01 NBYTES-ANCHOR PIC S9(9) BINARY.
01 INCREMENT PIC S9(9) BINARY.
01 ADDRSS USAGE POINTER VALUE NULL.
01 ANCHOR BASED USAGE POINTER.
01 ANCHOR-TMP USAGE POINTER.
01 ANCHOR-TMP2 USAGE POINTER.
01 ANCHOR-DES BASED USAGE POINTER.
01 ANCHOR-SRC BASED USAGE POINTER.
01 ANCHOR-TABLE USAGE POINTER VALUE NULL.
01 ANCHOR-TABLE-REF USAGE POINTER VALUE NULL.
01 WS-Data.
       05 WS-CharData OCCURS 80 TIMES INDEXED BY I PIC X.
01 WS-DataLen PIC 99 VALUE 0.
01 ID-P PIC 9(3).
01 INPUT-DATA PIC X USAGE DISPLAY.
01 TMP PIC X(50) USAGE DISPLAY.
01 WS-RESULT PIC X(50) VALUE " ".

LINKAGE SECTION.
01 NODE.
       05 NODE-DATA PIC X USAGE DISPLAY.
       05 NEXT-ITEM USAGE POINTER.
01 L-Option.
       05 L-Part PIC 9 VALUE 1.
       05 L-NLink PIC 9 VALUES 0.
       05 L-Input PIC X(80).

*> Expected value sent in L-Option:
*> MOVE "13ZN MCD P" TO L-Option
*> MOVE "19GTRW GCHPMSVW CLTSGM JHDMWRF PQLHSWFJ PJDNFMS ZBDFGCSJ RTB HNWLC" TO L-Option
PROCEDURE DIVISION USING L-Option.
Main.
       DISPLAY L-Part

       *> Utilities
       MOVE LENGTH OF NODE TO NBYTES-NODE
       MOVE 1 TO ID-P
       COMPUTE NBYTES-ANCHOR = NBYTES-NODE * L-NLink
   
       *> Creation of all linkedstacks
       ALLOCATE NBYTES-ANCHOR CHARACTERS RETURNING ADDRSS
       SET ANCHOR-TABLE TO ADDRSS
       SET ANCHOR-TABLE-REF TO ANCHOR-TABLE
       SET ADDRESS OF ANCHOR TO ANCHOR-TABLE

       PERFORM L-NLink TIMES
           MOVE ZEROES TO WS-DataLen
           UNSTRING L-Input DELIMITED BY ALL ' ' INTO WS-Data
           WITH POINTER ID-P
           INSPECT WS-Data TALLYING WS-DataLen FOR CHARACTERS BEFORE ' '

           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           PERFORM CreateLinkedStack
           PERFORM DisplayLinkedStack
           SET ANCHOR-TABLE UP BY NBYTES-NODE
       END-PERFORM
       DISPLAY " "
       
       *> Operations on linkedstacks
       OPEN INPUT DataFile.
           PERFORM UNTIL WS-EOF='Y'
               READ DataFile INTO F-Data
                   AT END MOVE 'Y' TO WS-EOF
                   NOT AT END 
                   IF L-Part EQUALS TO 1
                       PERFORM SwitchElementEachLinkedStack
                   END-IF
                   IF L-Part EQUALS TO 2
                       PERFORM SwitchElementByBlockLinkedStack
                   END-IF
               END-READ
           END-PERFORM
       CLOSE DataFile
       
       *> Display linkedstacks after all moving operation were done
       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       PERFORM L-NLink TIMES
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           SET ADDRESS OF NODE TO ANCHOR
           STRING WS-RESULT NODE-DATA DELIMITED BY " "
           INTO WS-RESULT
           PERFORM DisplayLinkedStack
           SET ANCHOR-TABLE UP BY NBYTES-NODE
       END-PERFORM
       DISPLAY " "
       DISPLAY "Top crate: " WS-RESULT

       *> Freeing all linkedstacks
       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       PERFORM L-NLink TIMES
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           PERFORM FreeLinkedStack
           SET ANCHOR-TABLE UP BY NBYTES-NODE
       END-PERFORM

       SET ADDRSS TO ANCHOR-TMP
       FREE ADDRSS
       SET ADDRSS TO ANCHOR-TABLE
       FREE ADDRSS
       SET ADDRSS TO ANCHOR-TABLE-REF
       FREE ADDRSS.
       GOBACK.
       
CreateLinkedStack.
       MOVE 0 TO LCOUNT
       SET ANCHOR TO NULL
       PERFORM WS-DataLen TIMES
           ADD 1 TO LCOUNT
           MOVE WS-CharData(LCOUNT) TO INPUT-DATA
           PERFORM PushLinkedStack
       END-PERFORM.

DisplayLinkedStack.
       SET ANCHOR-TMP TO ANCHOR
       PERFORM WITH TEST BEFORE UNTIL (ANCHOR-TMP = NULL)
           SET ADDRESS OF NODE TO ANCHOR-TMP
           DISPLAY NODE-DATA "->" WITH NO ADVANCING
           SET ANCHOR-TMP TO NEXT-ITEM
       END-PERFORM
       DISPLAY " ".

PopLinkedStack.
       IF ANCHOR NOT EQUALS TO NULL
           SET ANCHOR-TMP TO ANCHOR
           SET ADDRESS OF NODE TO ANCHOR
           SET ANCHOR TO NEXT-ITEM
           SET ADDRESS OF NODE TO ANCHOR-TMP
           SET NEXT-ITEM TO NULL
       END-IF.

PushLinkedStack.
       ALLOCATE NBYTES-NODE CHARACTERS RETURNING ADDRSS
       SET ADDRESS OF NODE TO ADDRSS
       IF ANCHOR = NULL
           SET NEXT-ITEM TO NULL
       ELSE
           SET NEXT-ITEM TO ANCHOR
       END-IF
       SET ANCHOR TO ADDRSS
       MOVE INPUT-DATA TO NODE-DATA.

PushExistingLinkedStack.
       IF ANCHOR-TMP NOT EQUALS TO NULL
           SET ADDRESS OF NODE TO ANCHOR-TMP
           IF ANCHOR = NULL
               SET NEXT-ITEM TO NULL
           ELSE
               SET NEXT-ITEM TO ANCHOR
           END-IF
           SET ANCHOR TO ANCHOR-TMP
       END-IF.

CutLinkedStack.
       SET ANCHOR-TMP TO ANCHOR
       PERFORM LCOUNT TIMES
           SET ADDRESS OF NODE TO ANCHOR
           SET ANCHOR TO NEXT-ITEM

           IF ANCHOR EQUALS TO NULL
               NEXT SENTENCE
           END-IF
       END-PERFORM
       SET NEXT-ITEM TO NULL.

GluLinkedStack.
       SET ANCHOR-TMP2 TO ANCHOR-TMP
       PERFORM WITH TEST BEFORE UNTIL (ANCHOR-TMP2 = NULL)
           SET ADDRESS OF NODE TO ANCHOR-TMP2

           IF NEXT-ITEM EQUALS TO NULL
               SET NEXT-ITEM TO ANCHOR
               SET ANCHOR TO ANCHOR-TMP
               NEXT SENTENCE
           END-IF

           SET ANCHOR-TMP2 TO NEXT-ITEM
       END-PERFORM.

SwitchElementEachLinkedStack.
       UNSTRING F-Data DELIMITED BY ' '
       INTO TMP WS-Quantity TMP WS-Src TMP WS-Des
       PERFORM WS-Quantity TIMES
           SET ANCHOR-TMP TO NULL

           SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
           COMPUTE INCREMENT = NBYTES-NODE * (WS-Src - 1)
           SET ANCHOR-TABLE UP BY INCREMENT
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
       
           PERFORM PopLinkedStack
    
           SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
           COMPUTE INCREMENT = NBYTES-NODE * (WS-Des - 1)
           SET ANCHOR-TABLE UP BY INCREMENT
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           
           PERFORM PushExistingLinkedStack
       END-PERFORM.

SwitchElementByBlockLinkedStack.
       UNSTRING F-Data DELIMITED BY ' '
       INTO TMP WS-Quantity TMP WS-Src TMP WS-Des

       SET ANCHOR-TMP TO NULL

       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       COMPUTE INCREMENT = NBYTES-NODE * (WS-Src - 1)
       SET ANCHOR-TABLE UP BY INCREMENT
       SET ADDRESS OF ANCHOR TO ANCHOR-TABLE

       MOVE WS-Quantity TO LCOUNT
       PERFORM CutLinkedStack

       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       COMPUTE INCREMENT = NBYTES-NODE * (WS-Des - 1)
       SET ANCHOR-TABLE UP BY INCREMENT
       SET ADDRESS OF ANCHOR TO ANCHOR-TABLE

       PERFORM GluLinkedStack.

FreeLinkedStack.
       PERFORM WITH TEST BEFORE UNTIL (ANCHOR = NULL)
           SET ADDRESS OF NODE TO ANCHOR
           SET ADDRSS TO ANCHOR
           SET ANCHOR TO NEXT-ITEM
           FREE ADDRSS
       END-PERFORM.
