IDENTIFICATION DIVISION.
PROGRAM-ID. LINKEDSTACK.

*>.\LinkedStack.exe 48ioprfafopvn nh jkl hjgfjnzzdjgbibvaibva
*>8->i->o->p->r->f->a->f->o->p->v->n->
*>n->h->
*>j->k->l->
*>h->j->g->f->j->n->z->z->d->j->g->b->i->b->v->a->i->b->v->a->

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-Option.
       05 WS-NLink PIC 9 VALUES 0.
       05 WS-Input PIC X(80).
           
01 LCOUNT PIC 99 USAGE DISPLAY VALUE 0.
01 NBYTES-NODE PIC S9(9) BINARY.
01 NBYTES-ANCHOR PIC S9(9) BINARY.
01 ADDRSS USAGE POINTER VALUE NULL.
01 ANCHOR BASED USAGE POINTER.
01 ANCHOR-TMP USAGE POINTER.
01 ANCHOR-TABLE USAGE POINTER VALUE NULL.
01 ANCHOR-TABLE-REF USAGE POINTER VALUE NULL.
01 WS-Data.
       05 WS-CharData OCCURS 80 TIMES INDEXED BY I PIC X.
01 WS-DataLen PIC 99 VALUE 0.
01 ID-P PIC 9(3).
01 IND PIC 9(3).

LINKAGE SECTION.
01 NODE.
       05 NODE-DATA PIC X USAGE DISPLAY.
       05 NEXT-ITEM USAGE POINTER.

PROCEDURE DIVISION.
Main.
       ACCEPT WS-Option FROM COMMAND-LINE
       MOVE LENGTH OF NODE TO NBYTES-NODE
       MOVE 1 TO ID-P
       
       COMPUTE NBYTES-ANCHOR = NBYTES-NODE * WS-NLink
       
       ALLOCATE NBYTES-ANCHOR CHARACTERS RETURNING ADDRSS
       SET ANCHOR-TABLE TO ADDRSS
       SET ANCHOR-TABLE-REF TO ANCHOR-TABLE
       SET ADDRESS OF ANCHOR TO ANCHOR-TABLE

       PERFORM WS-NLink TIMES
           MOVE ZEROES TO WS-DataLen
           UNSTRING WS-Input DELIMITED BY ALL ' ' INTO WS-Data
           WITH POINTER ID-P
           INSPECT WS-Data TALLYING WS-DataLen FOR CHARACTERS BEFORE ' '

           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           PERFORM CreateLinkedStack
           PERFORM DisplayLinkedStack
           PERFORM PopLinkedStack
           PERFORM PopLinkedStack
           SET ANCHOR-TABLE UP BY LENGTH OF ANCHOR
       END-PERFORM
       
       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       PERFORM WS-NLink TIMES
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           PERFORM DisplayLinkedStack
           SET ANCHOR-TABLE UP BY LENGTH OF ANCHOR
       END-PERFORM
       
       SET ANCHOR-TABLE TO ANCHOR-TABLE-REF
       PERFORM WS-NLink TIMES
           SET ADDRESS OF ANCHOR TO ANCHOR-TABLE
           PERFORM FreeLinkedStack
           SET ANCHOR-TABLE UP BY LENGTH OF ANCHOR
       END-PERFORM
       
       SET ADDRSS TO ANCHOR-TMP
       FREE ADDRSS
       SET ADDRSS TO ANCHOR-TABLE
       FREE ADDRSS
       SET ADDRSS TO ANCHOR-TABLE-REF
       FREE ADDRSS.
       GOBACK.
       
CreateLinkedStack.
       MOVE 0 TO LCOUNT
       SET ANCHOR TO NULL
       PERFORM WS-DataLen TIMES
           ADD 1 TO LCOUNT
           ALLOCATE NBYTES-NODE CHARACTERS RETURNING ADDRSS
           
           IF ANCHOR = NULL
               SET ANCHOR TO ADDRSS
           ELSE
               SET NEXT-ITEM TO ADDRSS
           END-IF

           SET ADDRESS OF NODE TO ADDRSS
           SET NEXT-ITEM TO NULL
           MOVE WS-CharData(LCOUNT) TO NODE-DATA
       END-PERFORM.

DisplayLinkedStack.
       SET ANCHOR-TMP TO ANCHOR
       PERFORM WITH TEST BEFORE UNTIL (ANCHOR-TMP = NULL)
           SET ADDRESS OF NODE TO ANCHOR-TMP
           DISPLAY NODE-DATA "->" WITH NO ADVANCING
           SET ANCHOR-TMP TO NEXT-ITEM
       END-PERFORM
       DISPLAY " ".

PopLinkedStack.
       IF ANCHOR NOT EQUALS TO NULL
           SET ANCHOR-TMP TO ANCHOR
           SET ADDRESS OF NODE TO ANCHOR
           SET ANCHOR TO NEXT-ITEM
           SET ADDRESS OF NODE TO ANCHOR-TMP
           SET NEXT-ITEM TO NULL
       END-IF.       

FreeLinkedStack.
       PERFORM WITH TEST BEFORE UNTIL (ANCHOR = NULL)
           SET ADDRESS OF NODE TO ANCHOR
           SET ADDRSS TO ANCHOR
           SET ANCHOR TO NEXT-ITEM
           FREE ADDRSS
       END-PERFORM.
